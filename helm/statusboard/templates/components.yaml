{{- if .Values.metricsServer.enabled }}
#components
# ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.metricsServer.serviceAccount.name | default "metrics-server" }}
  namespace: {{ .Values.namespace }}
  labels:
    k8s-app: metrics-server

---
# ClusterRole: aggregated-metrics-reader
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Values.metricsServer.clusterRole.aggregatedReaderName | default "system:aggregated-metrics-reader" }}
  labels:
    k8s-app: metrics-server
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-view: "true"
rules:
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get","list","watch"]

---
# ClusterRole: metrics-server
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Values.metricsServer.clusterRole.name | default "system:metrics-server" }}
  labels:
    k8s-app: metrics-server
rules:
  - apiGroups: [""]
    resources: ["nodes/metrics"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["pods", "nodes"]
    verbs: ["get", "list", "watch"]

---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Values.metricsServer.roleBinding.name | default "metrics-server-auth-reader" }}
  namespace: kube-system
  labels:
    k8s-app: metrics-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - kind: ServiceAccount
    name: {{ .Values.metricsServer.serviceAccount.name | default "metrics-server" }}
    namespace: kube-system

---
# ClusterRoleBinding: auth-delegator
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Values.metricsServer.clusterRoleBinding.authDelegator | default "metrics-server:system:auth-delegator" }}
  labels:
    k8s-app: metrics-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: {{ .Values.metricsServer.serviceAccount.name | default "metrics-server" }}
    namespace: kube-system

---
# ClusterRoleBinding: metrics-server
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Values.metricsServer.clusterRoleBinding.metricsServer | default "system:metrics-server" }}
  labels:
    k8s-app: metrics-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:metrics-server
subjects:
  - kind: ServiceAccount
    name: {{ .Values.metricsServer.serviceAccount.name | default "metrics-server" }}
    namespace: kube-system

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.metricsServer.service.name | default "metrics-server" }}
  namespace: kube-system
  labels:
    k8s-app: metrics-server
spec:
  ports:
    - appProtocol: https
      name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    k8s-app: metrics-server

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.metricsServer.deployment.name | default "metrics-server" }}
  namespace: kube-system
  labels:
    k8s-app: metrics-server
spec:
  selector:
    matchLabels:
      k8s-app: metrics-server
  strategy:
    rollingUpdate:
      maxUnavailable: 0
  template:
    metadata:
      labels:
        k8s-app: metrics-server
    spec:
      serviceAccountName: {{ .Values.metricsServer.serviceAccount.name | default "metrics-server" }}
      containers:
        - name: metrics-server
          image: "{{ .Values.metricsServer.image.repository | default "registry.k8s.io/metrics-server/metrics-server" }}:{{ .Values.metricsServer.image.tag | default "v0.8.0" }}"
          imagePullPolicy: {{ .Values.metricsServer.image.pullPolicy | default "IfNotPresent" }}
          args:
            - --cert-dir=/tmp
            - --secure-port=10250
            - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
            - --kubelet-use-node-status-port
            - --metric-resolution=15s
            - --kubelet-insecure-tls
          ports:
            - containerPort: 10250
              name: https
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: https
              scheme: HTTPS
            periodSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
            periodSeconds: 10
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /tmp
              name: tmp-dir
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-cluster-critical
      volumes:
        - emptyDir: {}
          name: tmp-dir

---
# APIService
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1beta1.metrics.k8s.io
  labels:
    k8s-app: metrics-server
spec:
  group: metrics.k8s.io
  groupPriorityMinimum: 100
  insecureSkipTLSVerify: true
  service:
    name: {{ .Values.metricsServer.service.name | default "metrics-server" }}
    namespace: kube-system
  version: v1beta1
  versionPriority: 100

{{- end }}